*{
  margin: 5px;
  padding: 0;
  box-sizing: border-box;
}

// Custom Variables
$container-width: 1500;
// Color Variables
$base-color: brown;

@import './components/functions';
@import './components/mixins';

%extend {
  font-family: Arial, Helvetica, sans-serif;
  font-size: 16px;
  padding: 15px;
  margin: 0 0 15px 15px;
}
#first {
  background-color: $base-color;
}
#second {
  background-color: darken($base-color, 10);
}
#third {
  background-color: lighten($base-color, 50);
}
#fourth {
  background-color: adjust-hue($base-color, 50);
}
#fifth {
  background-color: saturate($base-color, 30);
}
#sixth {
  background-color: desaturate($base-color, 60);
}
#seventh {
  background-color: mix($base-color , yellow, 50%);
}
#eighth {
  background-color: transparentize($base-color, .7);
}
#first, #second, #third, #fourth, #fifth, #sixth, #seventh, #eighth {
  width: 400px;
  height: 100px;
  margin-bottom: 20px;
  border: 1px solid #000;
}
//  

// Sass Functions Practice
.half-width {
  width: half($container-width);
}
// Usages of Custom Functions
.one-third-width {
  width: one-third($container-width);
}
.one-fourth-width {
  width: one-fourth($container-width);
}
// Usages of Color Function
.darken-button {
  background-color: darken-color(#3469db, 10%);
}
// Usages of Sass Number Functions(nf)
.nf-test1 {margin: abs(-10px);} // Create absolute value
.nf-test2 {margin: ceil(4.5px);} // Create up values
.nf-test3{margin: floor(3.9px);} // Create down value
.nf-test4{margin: round(5.8px);}  // Create up/down if value will be lower then .5 then create down value & if value will be higher then .5 then create up values. 
.nf-test5{margin: max(1px, 5px, 10px);} // Return  maximum value.
.nf-test6{margin: min(4px, 1px, 39px);} // Return minimum value.
.nf-test7{margin: percentage(calc(100 / 50));} // Return percentage value.
.nf-test8{margin: comparable(10px, 20px);} // Return (true) if the value is comparable / Return (false) if the value is uncomparable.
.nf-test9{content: random(100);} // Return a random number between (0 to 100).
.nf-test10{content: unit(20rem);} // Return unit names.
.nf-test11{content: unitless(100);} // Return (true) if we don't give any unit with our number value / Return (false) if we give any unit name with our number value.

// Sass String Functions (sf)
.sf-test1{font-family: quote(Arial);} // Return qoute value
.sf-test2{font-family: unquote("Roboto");} // Return unqoute value
.sf-test3{content: to-lower-case("HELLO LOWERCASE");} // Return lowercase value 
.sf-test4{content: to-upper-case("Hello Upercase");} // Return upercase value
.sf-test5{content: str-length("What is my string length");} // Return string length
.sf-test6{content: str-index("Halvetica Neue", "N");} // Return string index number {Case Sensitive}
.sf-test7{content: str-insert("Helvetica Neue", " Mono" , 10);} // Insert a new value in existing string
.sf-test8{font-family: str-slice("Helvetica Neue", 10, -1);} // Return slice value from string
.sf-test9{content: unique-id();} // return an unique id

// Sass List Functions (lf)
$list: 10px, 20px, 30px;
$list2: 40px 50px 60px;
.lf-test1 {content: length($list);} // Returns the number of items in a list.
.lf-test2 {content: nth($list, 2)} // Returns the nth item in a list.
.lf-test3 {content: set-nth($list, 2 , 2rem)} // Replaces the nth item in a list with a new value.
.lf-test4{content: join($list, $list2, auto);} // Combines two lists into one
.lf-test5{content: append($list, 70px 80px , space);} // Adds a new value to the end of a list.
.lf-test6{content: zip($list, $list2);} // Combines several lists into a single list of sub-lists, where each sub-list contains the nth items from each of the original lists.
.lf-test7{content: index($list, 20px);} // Returns the index of the first occurrence of a value in a list.
.lf-test8{content: list-separator($list2);} // Returns the separator used in the list (comma, space, or slash).
.lf-test9{content: is-bracketed($list);} // Returns whether a list is enclosed in square brackets.

// Sass Selector Functions
$selector: selector-nest("ul", "li");
$selector2: selector-append(".abc", "_copy, _images");
$selector3: selector-replace("a.abc",".abc",".link");
$selector4: simple-selectors("a.abc");
$selector5: selector-unify(".active a", ".main a");
$selector6: selector-extend(".abc .info", ".info", ".content nav.sidebar");
// Selector Nest Function
#{$selector}{
  width: 10px;
}
// Selector Append Function 
#{$selector2}{
  width: 20px;
}
// Selector Replace Function
#{$selector3}{
  text-decoration: none;
}
// Simple Selectors Function
#{$selector4}{
  width: 30px;
}
// Selector Unify Function
#{$selector5}{
  width: 55px;
}
// Selector Extend Function
#{$selector6}{
  margin-top: 20px;
}

// Sass Map Functions (.mf)
$font-weight: ("normal": 400, "medium": 500, "semibold": 600);
$light-weight: ('lightest': 100, 'light': 300);
$map-merge: map-merge($light-weight, $font-weight );
$map-remove: map-remove($font-weight, "semibold");
.mf-test1{
  font-weight: map-get($font-weight, medium)
}
.mf-test2{
  font-weight: map-keys($font-weight);
}
.mf-test3{
  font-weight: map-values($font-weight);
}
.mf-test4{
  font-weight: map-values($map-merge);
}
.mf-test5{
  font-weight: map-keys($map-remove);
}
.mf-test6{
  font-weight: map-has-key($font-weight, "medium");
}

// Sass Introspection Functions (.if)
$num: 10px;
$char: "Arial";
$list: 10px 20px 30px;
$map: ('regular': 400, 'medium': 500, 'semibold': 600, 'bold': 700);
// variable-exitst function
.if-test1 {
  content: variable-exists(char); // Return true if variable exist.
}
// global-variable-exists function 
.if-test2{
  content: global-variable-exists(num);
}
// mixin-exists function
.if-test3 {
  content: mixin-exists(set-icon);
}
// function-exists function
.if-test4{
  content: function-exists(half);
}
// type-of function
.if-test5 {
  content: type-of($map);
}
// inspect function
.if-test6{
  content: inspect($list);
}